[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fapilog"
version = "0.1.2"
description = "Production-ready structured logging for FastAPI with trace IDs, async queues, and observability integration"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Chris Haste", email = ""}
]
keywords = [
    "fastapi", "logging", "structured", "asyncio", "middleware", "observability", 
    "json", "loki", "tracing", "monitoring", "microservices", "production", 
    "context", "correlation", "distributed", "cloud-native", "opentelemetry"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Logging",
    "Topic :: System :: Monitoring",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Framework :: FastAPI",
    "Framework :: AsyncIO",
]
requires-python = ">=3.8"
dependencies = [
    "structlog",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "anyio",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pytest-cov>=4.0.0",
    "hatch>=1.0.0",
    "fastapi>=0.100.0",
    "httpx>=0.27.0",
    "pre-commit>=3.0.0",
    "vulture>=2.10.0",
    "build>=1.0.0",
]
loki = [
    "httpx>=0.27.0",
]
fastapi = [
    "fastapi>=0.100.0",
    "httpx>=0.27.0",
    "uvicorn>=0.20.0",
]
metrics = [
    "psutil>=5.9",
]
prometheus = [
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
]

[project.urls]
Homepage = "https://github.com/chris-haste/fastapi-logger"
Repository = "https://github.com/chris-haste/fastapi-logger"
Documentation = "https://fapilog.readthedocs.io/"
Bug-Tracker = "https://github.com/chris-haste/fastapi-logger/issues"
"PyPI Package" = "https://pypi.org/project/fapilog/"

[tool.hatch.build.targets.wheel]
packages = ["src/fapilog"]

[tool.hatch.build.targets.sdist]
include = [
    "src/fapilog/**/*.py",
    "README.md",
    "LICENSE",
    "NOTICE",
    "pyproject.toml",
]
exclude = [
    "tests/**/*",
    "docs/**/*",
    "examples/**/*",
    "scripts/**/*",
    ".github/**/*",
    ".pre-commit-config.yaml",
    ".vulture",
    ".coveragerc",
    "tox.ini",
    "requirements-example.txt",
    "CHANGELOG.md",
    "CONTRIBUTING.md",
    "RELEASING.md",
    "htmlcov/**/*",
    "dist/**/*",
    "build/**/*",
    "__pycache__/**/*",
    "*.pyc",
    "*.pyo",
    "*.pyd",
    ".pytest_cache/**/*",
    ".mypy_cache/**/*",
    ".ruff_cache/**/*",
]

[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "ruff",
    "mypy",
    "pytest-cov",
]

[tool.hatch.envs.lint]
dependencies = [
    "ruff>=0.1.0",
]
scripts = { lint = "ruff check .", format = "ruff format ." }

[tool.hatch.envs.typecheck]
dependencies = [
    "mypy>=1.0.0",
]
scripts = { typecheck = "mypy src/ tests/" }

[tool.hatch.envs.test]
dependencies = [
    "pytest>=7.0.0",
    "pytest-asyncio==0.23.6",
    "pytest-cov>=4.0.0",
    "fastapi>=0.100.0",
    "httpx>=0.27.0",
    "psutil>=5.9",
    "uvicorn>=0.20.0",
]
default-script = "test"

[tool.hatch.envs.test.scripts]
test = "pytest tests/ --cov=src/fapilog --cov-report=term-missing --cov-fail-under=90"
test-cov = "pytest tests/ --cov=src/fapilog --cov-report=term-missing"
test-queue-load = "python scripts/load_test_log_queue.py"

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"examples/*" = ["B904"]

[tool.mypy]
python_version = "3.8"
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
ignore_missing_imports = true
disable_error_code = ["misc", "arg-type", "assignment", "var-annotated", "union-attr"]

[[tool.mypy.overrides]]
module = [
    "tests.*",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/fapilog",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=90",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "asyncio: marks tests as asyncio tests",
]

[tool.vulture]
paths = ["src/", "tests/"]
exclude = [
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/build/*",
    "*/dist/*",
    "*/htmlcov/*",
    "*/coverage/*",
    "*/examples/*",  # Exclude examples as they may have unused code for demonstration
]
ignore_names = [
    "unused_*",
    "test_*",
    "Test*",
    "__*",
    "main",
    "app",
    "logger",
    "settings",
    "config",
    # Error handling utility functions (may be used in future)
    "handle_redaction_error",
    "safe_execute",
    "safe_execute_async", 
    "graceful_degradation",
    "graceful_degradation_async",
    "retry_with_backoff",
    # Redactor utility functions (may be used in future)
    "_get_nested_value",
    "_set_nested_value",
    # Backward compatibility functions
    "_get_log",
]
ignore_decorators = [
    "pytest.fixture",
    "pytest.mark.asyncio",
    "asyncio.coroutine",
]
