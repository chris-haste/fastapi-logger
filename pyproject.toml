[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fapilog"
version = "0.2.0"
description = "Production-ready structured logging for FastAPI with trace IDs, async queues, and observability integration"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Chris Haste", email = ""}
]
keywords = [
    "fastapi", "logging", "structured", "asyncio", "middleware", "observability", 
    "json", "loki", "tracing", "monitoring", "microservices", "production", 
    "context", "correlation", "distributed", "cloud-native", "opentelemetry"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Logging",
    "Topic :: System :: Monitoring",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Framework :: FastAPI",
    "Framework :: AsyncIO",
]
requires-python = ">=3.8"
dependencies = [
    "structlog",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "anyio",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pytest-cov>=4.0.0",
    "hatch>=1.0.0",
    "fastapi>=0.100.0",
    "httpx>=0.27.0",
    "pre-commit>=3.0.0",
    "vulture>=2.10.0",
    "build>=1.0.0",
    "jsonschema==4.25.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
    "sphinx-autodoc-typehints>=1.19.0",
]
loki = [
    "httpx>=0.27.0",
]
fastapi = [
    "fastapi>=0.100.0",
    "httpx>=0.27.0",
    "uvicorn>=0.20.0",
]
metrics = [
    "psutil>=5.9",
]
prometheus = [
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
]

[project.urls]
Homepage = "https://github.com/chris-haste/fastapi-logger"
Repository = "https://github.com/chris-haste/fastapi-logger"
Documentation = "https://fapilog.readthedocs.io/"
Bug-Tracker = "https://github.com/chris-haste/fastapi-logger/issues"
"PyPI Package" = "https://pypi.org/project/fapilog/"

[tool.hatch.build.targets.wheel]
packages = ["src/fapilog"]

[tool.hatch.build.targets.sdist]
include = [
    "src/fapilog/**/*.py",
    "README.md",
    "LICENSE",
    "NOTICE",
    "pyproject.toml",
]
exclude = [
    "tests/**/*",
    "docs/**/*",
    "examples/**/*",
    "scripts/**/*",
    ".github/**/*",
    ".pre-commit-config.yaml",
    ".vulture",
    ".coveragerc",
    "tox.ini",
    "requirements-example.txt",
    "CHANGELOG.md",
    "CONTRIBUTING.md",
    "RELEASING.md",
    "htmlcov/**/*",
    "dist/**/*",
    "build/**/*",
    "__pycache__/**/*",
    "*.pyc",
    "*.pyo",
    "*.pyd",
    ".pytest_cache/**/*",
    ".mypy_cache/**/*",
    ".ruff_cache/**/*",
]

[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "ruff",
    "mypy",
    "pytest-cov",
]

[tool.hatch.envs.lint]
dependencies = [
    "ruff>=0.1.0",
]
scripts = { lint = "ruff check .", format = "ruff format ." }

[tool.hatch.envs.typecheck]
dependencies = [
    "mypy>=1.0.0",
]
scripts = { typecheck = "mypy src/ tests/" }

[tool.hatch.envs.test]
dependencies = [
    "pytest>=7.0.0",
    "pytest-asyncio==0.23.6",
    "pytest-cov>=4.0.0",
    "fastapi>=0.100.0",
    "httpx>=0.27.0",
    "psutil>=5.9",
    "uvicorn>=0.20.0",
    "jsonschema==4.25.0",
]
default-script = "test"

[tool.hatch.envs.test.scripts]
test = "pytest tests/ --cov=src/fapilog --cov-report=term-missing --cov-report=xml --cov-fail-under=90"
test-cov = "pytest tests/ --cov=src/fapilog --cov-report=term-missing --cov-report=xml"
test-queue-load = "python scripts/load_test_log_queue.py"

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"examples/*" = ["B904"]

[tool.mypy]
python_version = "3.9"
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
ignore_missing_imports = true
disable_error_code = ["misc", "arg-type", "assignment", "var-annotated", "union-attr"]

[[tool.mypy.overrides]]
module = [
    "tests.*",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/fapilog",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=90",
    "--disable-warnings",
    "-W ignore::RuntimeWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "asyncio: marks tests as asyncio tests",
]
filterwarnings = [
    "ignore::RuntimeWarning",
    "ignore:coroutine.*was never awaited:RuntimeWarning",
    "ignore:Event loop is closed:RuntimeWarning",
    "ignore:Exception ignored in.*asyncio.*:RuntimeWarning",
]

[tool.vulture]
paths = ["src/", "tests/"]
exclude = [
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/build/*",
    "*/dist/*",
    "*/htmlcov/*",
    "*/coverage/*",
    "*/examples/*",  # Exclude examples as they may have unused code for demonstration
]
ignore_names = [
    "unused_*",
    "test_*",
    "Test*",
    "__*",
    "main",
    "app",
    "logger",
    "settings",
    "config",
    # Error handling utility functions (may be used in future)
    "handle_redaction_error",
    "safe_execute",
    "safe_execute_async", 
    "graceful_degradation",
    "graceful_degradation_async",
    "retry_with_backoff",
    # Redactor utility functions (may be used in future)
    "_get_nested_value",
    # RedactionProcessor methods (used in tests)
    "get_performance_metrics",
    "clear_cache", 
    "reset_metrics",
    # Smart cache dataclass fields (false positive - used in dataclass)
    "cached_at",
    "_set_nested_value",
    # Backward compatibility functions
    "_get_log",
    # Methods used in tests or public API
    "record_sink_retry",
    "_write_with_metrics",
    "get_queue_worker",

    "is_configured",
    "setup",
    "configure_httpx_trace_propagation",
    "metrics_endpoint",
    "health_endpoint",
    "root_endpoint",
    "is_running",
    "get_metrics_url",
    "start_metrics_server",
    "stop_metrics_server",
    "get_metrics_text",
    "get_metrics_dict",
    # Context manager exception parameters (standard Python protocol)
    "exc_type",
    "exc_val", 
    "exc_tb",
    # Methods used in tests (false positives)
    "force_cleanup",
    "get_deduplication_stats",
    # Pydantic validators and framework methods
    "parse_sinks",
    "parse_redact_patterns", 
    "parse_redact_fields",
    "parse_custom_pii_patterns",
    "validate_redact_level",
    "validate_level",
    "validate_json_console",
    "validate_sampling_rate",
    "validate_queue_maxsize",
    "validate_queue_batch_size",
    "validate_queue_batch_timeout",
    "validate_queue_retry_delay",
    "validate_queue_max_retries",
    "validate_queue_overflow",
    # Context and utility functions
    "context_copy",
    "get_span_id",
    "get_user_id", 
    "get_user_roles",
    "get_auth_scheme",
    "set_trace_context",
    "reset_trace_context",
    "set_request_metadata",
    "set_response_metadata",
    "reset_request_metadata",
    "reset_response_metadata",
    # Queue and async functions
    "enqueue",
    
    "create_logger",
    # Cache monitoring methods (public API for observability)
    "get_cache_stats",
    # Enricher functions
    "create_user_dependency",
    # AsyncSmartCache methods (used in tests)
    "get_or_compute",
    "register_enricher",
    "clear_enrichers",
    # HTTPX functions
    "disable_httpx_trace_propagation",
    "is_httpx_trace_propagation_enabled",
    # Middleware functions
    "add_trace_exception_handler",
    "trace_exception_handler",
    "dispatch",
    # Monitoring functions
    "model_config",
    # Conditional imports and framework variables
    "Response",
    "FASTAPI_AVAILABLE",
    "exc",
    # Loki sink attributes
    "_last_flush",
    "_flush_task",
    # BatchManager properties for monitoring and extensibility
    "time_since_last_flush",
    "current_batch_size",
    # LokiHttpClient properties for monitoring
    "is_connected",
    # LokiPayloadFormatter methods for extensibility
    "update_labels",
    "add_label",
    "remove_label",
    # Validation processor settings and methods
    "enable_validation",
    "validation_required_fields", 
    "validation_field_types",
    "validation_mode",
    "validate_validation_mode",
    "parse_validation_required_fields",
    "parse_validation_field_types",
    "ValidationProcessor",
    # Async methods used in tests
    "cache_stats_async",
    "validation_stats",
    # Processor metrics settings and methods
    "enable_processor_metrics",
    "processor_metrics_include_enrichers",
    "processor_metrics_reset_interval",
    "validate_processor_metrics_reset_interval",
    "ProcessorMetrics",
    "wrap_processor_with_metrics",

    "get_processor_performance_stats",
    "get_processor_health_status",
    "reset_processor_metrics",
    "get_processor_summary",
    # Processor registry
    "ProcessorRegistry",
    "register_processor",
    # Simplified error handling functions
    "simple_processor_execution", 
    "create_simple_processor_wrapper",
    # Processor API methods and properties
    "is_started",
    "validate_processor_configuration",
    "safe_processor_lifecycle_operation",
    "_cleanup_old_entries",
    "get_current_rates",
    "cache_stats",
    # Queue internal attributes
    "disabled",
    # Testing framework API methods
    "debug_sink_configuration",
    "print_sink_registry_status", 
    "print_sink_debug_info",
    "run_integration_suite",
    "get_test_results",
    "clear_test_results",
    "print_test_summary",
    "run_uri_test_suite",
    "get_test_summary",
    "clear_results",
    "create_test_uri_cases",
    # Mock testing API methods
    "get_events",
    "get_last_event",
    "get_stats",
    # RetryCoordinator methods (used in tests and public API)
    "coordinate_retry",
    "reset_stats",
    "get_performance_stats",
    "get_failure_count",
    "get_batches",
    "get_current_batch",
    "get_timing_stats",
    "get_transformation_count",
    "get_filter_stats",
    # Performance testing methods
    "run_comprehensive_test",
    "get_metrics",
    "clear_metrics",
    "print_summary",
    "_test_events",
    # Sink testing framework methods
    "create_test_sink",
    "validate_sink_interface",
    "validate_sink_name_for_uri",
    "clear_state",
    # Testing variables and attributes
    "ignore_order",
    "error_rate",
    # New simplified testing API
    "ProcessorTestResult",
    "test_processor_with_events",
    "validate_processor_behavior",
    "stress_test_processor",
    "test_processor_edge_cases", 
    "benchmark_processor_performance",
    "run_processor_performance_suite",
    # Foundation Components - Public API methods for future processor implementations
    # ProcessorLockManager
    "get_sync_lock",
    "get_async_lock", 
    "cleanup_unused_locks",
    "get_lock_stats",
    # SafeAsyncCache
    "get_or_create",
    "get",
    "set", 
    "delete",
    "clear",
    "cleanup_expired",
    "get_stats",
    "get_all_keys",
    # AsyncProcessorBase - base class and protected methods
    "AsyncProcessorBase",
    "_safe_cache_operation",
    "_atomic_update",
    "_get_or_create_cached_value",
    "_update_cache_atomic", 
    "_remove_from_cache",
    "_cleanup_expired_cache",
    "get_async_stats",
    "_handle_processor_error",
    "process_async",
    "_create_processor_task",
    "_start_impl",
    "_stop_impl",
    # Test framework methods
    "create_processor",
    # Template example methods (used by external test code)
    "example_basic_processing",
    "example_rate_limiting", 
    "example_concurrent_access",
    # Public API functions (may be used by external code) 
    "configure_with_container",
    "scoped_logger",
    # Component management methods (used extensively in tests - false positives)
    "get_lock_manager",
    "register_component", 
    "get_component",
    "component_lock",
    # ContextualComponentManager and its methods (complete tested implementation)
    "ContextualComponentManager",
    "set_component",
    "has_component", 
    "remove_component",
    "clear_components",
    "get_component_count",
    "get_component_types",
    "container_context",
    # Container API methods
    "get_processor_metrics",
    # Container internal attributes (used but vulture doesn't detect properly)
    "_metrics_collector",
]
ignore_decorators = [
    "pytest.fixture",
    "pytest.mark.asyncio",
    "asyncio.coroutine",
]

[tool.coverage.report]
fail_under = 80
show_missing = true
